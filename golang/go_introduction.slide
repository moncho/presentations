Go
The programming language you should be learning


20 Jan 2017



Moncho
* Agenda

- Introduction
- Basic stuff
- Nice stuff
- Now what?

* What is Go?

- An open source programming language created at *Google* on 2007 by Robert Griesemer, Rob Pike, and Ken Thompson.

- Designed to solve Google's problems.
: Google problems are big. Big software (many millions of loc), several languages, thousands of developers, infinite number of machines
: Single "tree", build (even wit a custom distributed system) is big.
: Created to solve software engineering problem, it is not the result of an academic effort to create a new language.

- Current stable version is 1.7, 1.8 to be released on Jan, 31.

.caption [[https://talks.golang.org/2012/splash.article][Go conception]]
* Characteristics:

- General purpose
- Simple
- Statically typed
- Garbage collected
- Safe
- Designed for concurrency

* Basic syntax

*Go* has a clean syntax and a reduced grammar (25 keywords).

: Familiar to C and C++ programmers. So it should be kind of familiar to Java programmers as well.
: Declarations are read left to right
: Return type of a function is at the end
: No semicolons

Hello world:
.play main.go /func main/,/^}/

* Types and methods
: type declaration
: type alias
: method declaration
: type assertion
.play greeter.go

.caption [[https://golang.org/ref/spec][Language spec]]

* Interfaces

Go has no type hierarchy, it has interfaces. An interface is satisfied by a type if all its methods are implemented.

: Go favors composition over inheritance.
: "The bigger the interface, the weaker the abstraction"


.code interfaces.go /START OMIT/,/END OMIT/

* Interfaces (II)

.play interfaces.go /START 2OMIT/,/END 2OMIT/


.caption [[https://golang.org/doc/effective_go.html#interfaces][Effective Go interfaces]]

* Error handling

There are no exceptions. Error are represented by a pre-defined interface type called *error*.

Error handling does not obscure the flow of control.

: "Don't just check errors, handle them gracefully."
: Exception in other languages are used to control the flow, which does not even fit the name
: Errors are values, and they should be treated as such


.code errors.go /START OMIT/,/END OMIT/

.caption [[https://blog.golang.org/errors-are-values][Errors are values]]

* Error handling (II)

.play -edit errors.go /START 2OMIT/,/END 2OMIT/

* Concurrency

Go's approach to concurrency is based on [[https://en.wikipedia.org/wiki/Communicating_sequential_processes][CSP]].

In Go, concurrency has three elements:

: Concurrency is the ability to write your program as independently executing pieces.

- goroutines (execution)
- channels (communication)
- `select` (coordination)

Easy analogy for Java developers, goroutines are very light-weight threads.

But is a bit more than that, and the result is that they are much more cheaper to create and to switch between as it all happens in user space.


: Tens of thousands of goroutines in a single process are the norm, hundreds of thousands are not unexpected.
: Goroutines are cooperatively scheduled, rather than relying on the kernel to manage their time sharing
: Goroutines are multiplexed onto multiple OS threads

* Concurrency (II)

.code concurrency.go /START 2OMIT/,/END 2OMIT/

* Concurrency (II)

.play concurrency.go /START OMIT/,/END OMIT/


* Beauty is in the (not always so) little details

- Code visibility outside a package is determined by whether its first character is upper case
- Functions as first-class citizens
- Type alias
- The Go compiler generates a single binary
- And cross compiles
- Gofmt. No more format wars
- Install dependencies with go get (a bit controversial)
- And no semicolons, cant beat that

* What now

git rm nlp; vi main.go



* Software built with Go

Go is becoming the language of choice to build system software. A few examples:

- [[https://github.com/kubernetes/kubernetes][Kubernetes]]
- [[https://github.com/docker/docker][Docker]]
- Hashicorp tools (Consul, Terraform, Vault, Nomad)

But not just that:

- [[https://github.com/google/grumpy][Grumpy]]
- [[https://github.com/mholt/caddy][Caddy]]
- [[https://github.com/nats-io/gnatsd][NATS]]


* Resources

- [[http://tour.golang.org/][The Go Tour]]
- [[https://golang.org/doc/effective_go.html][Effective Go]]
- [[https://golang.org/doc/][Go official documentation]]
- [[https://gobyexample.com][Go By Example]]

- [[https://groups.google.com/forum/#!forum/golang-nuts][Go discussion list]]
- [[https://github.com/golang/go/wiki/GoTalks][Go talks]]
- [[http://gophervids.appspot.com/][Gopher Vids]]


* QA

* The prestige
